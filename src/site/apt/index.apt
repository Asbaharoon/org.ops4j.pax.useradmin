``
    --------------------------
    Pax UserAdmin Introduction
    --------------------------
    Matthias Kuespert
    -----------------
    2009 August 08
    --------------

Overview

  The Pax UserAdmin project aims to leverage the standard OSGi UserAdmin specification as specified in chapter 107
  of the latest {{{http://www.osgi.org/Download/File?url=/download/r4v42/r4.cmpn.pdf}OSGi Service Platform Release 4 Compendium Specification Version 4.2}}.
  
  Main goal is to provide 'enterprise value' - all the tools and handles needed to manage large amounts of user
  data, often having to deal with one or even more legacy systems.
  
  This includes features like:
  
    * transfer data from one UserAdmin service instance to another
  
    * transfer data from and to files and other streams
  
    * ability to transparently switch between different storage technologies
  
  The current effort is very straightforward - any feedback, test-experiences or 'value adding' feature requests
  to make the implementation more sophisticated are welcomed on the {{{mail-lists.html}mailing list}}.

  
Architecture & Design

~~  The Pax UserAdmin architecture is based on a standard OSGi UserAdmin service using the
~~  {{{xref/org/ops4j/pax/useradmin/service/spi/StorageProvider.html}StorageProvider}} SPI
~~  to access underlying storage mechanisms (e.g. Ldap).

  The Pax UserAdmin architecture is based on the {{{http://www.osgi.org/blog/2007/02/osgi-extender-model.html}Extender Pattern}}: a
  ServiceTracker tracks all services that implement the {{{xref/org/ops4j/pax/useradmin/service/spi/StorageProvider.html}StorageProvider SPI}}
  and manages OSGi {{{xref/org/ops4j/pax/useradmin/service/internal/UserAdminImpl.html}UserAdmin service instances}} for each provider it detects.

  The Pax UserAdmin service implementation provides all the necessary glue code to enable independent development of storage providers and service consumers.
    
[images/UserAdminOverview.png] Overview
  
~~  Thus the complexity of user data management is broken down into 3 layers:
  
~~  [[1]] SPI - persistence details
~~  [[2]] OSGi framework - service dynamics
~~  [[3]] OSGi Specification - UserAdmin API
  
~~  Therefor UserAdmin service instances are not necessarily started when the bundle is started - they are started
~~  when a new StorageProvider service is detected.

  The decoupling of the OSGi service management code from the actual storage access offers advantages for developers
  as well as deployers and system maintainers: developers can concentrate on the actual storage access code while
  deployers may easily combine arbitrary StorageProvider services.
  
  Although simple, this architecture allows complex configurations, e.g. having multiple UserAdmin services in
  one framework to transfer data from one to the other.

  <<StorageProvider Types>>

  Services implementing the StorageProvider interface must define a provider-type service property which must be globally unique
  in the system. This property is also set to the UserAdmin service for that provider, so standard OSGi filter mechanism
  can be used to locate services.
  
  Standard types delivered together with the project are:
  
*--------------+--------+
 - LDAP        | access to LDAP stores via the ldap:// protocol
*--------------+--------+
 - Preferences | access to data stored via the OSGi Preferences service
*--------------+--------+
Standard StorageProvider Types
  
  More provider types may be defined by 3rd party implementations.
  
  <<Useradmin URI Protocol>>

   To identify UserAdmin instances a new URI protocol <<<useradmin://<provider-type>>> is introduced.
   A useradmin URI consists of the protocol prefix and a provider-type, i.e. useradmin://Ldap
   
~~  
~~  Services implementing the StorageProvider interface are detected dynamically when they are started. Each service must
~~  define a provider-type property which must be globally unique in the system.  
  
~~  For each new StorageProvider service type found a new UserAdmin service instance is created. If a StorageProvider
~~  service for a registered type is stopped, the corresponding UserAdmin service is also stopped.

~~  Since the UserAdmin services always have the same provider-type property set as their underlying storage-provider,
~~  a bundle may use framework filters to narrow the search by the provider-type property.

  
Distribution

  The Pax UserAdmin project is distributed as a set of OSGi bundles available in 
  the {{{http://repository.ops4j.org/mvn-snapshots/org/ops4j/pax/useradmin/}OPS4J snapshot repository}}:
  
  * the {{{bundles/service.html}pax-useradmin-service}} bundle containing the extender logic and core service implementation

~~  The Pax UserAdmin service is a lightweight OSGi service that implements the standard UserAdmin service
~~  API and connects it to an underlying storage using a dynamic plugin-mechanism based on the
~~  {{StorageProvider}} SPI.

  * currently two pax-useradmin-provider-<type> bundles: {{{bundles/provider-ldap/overview.html}Ldap}} and {{{bundles/provider-preferences/overview.html}PreferencesService}} based.

~~  Storage providers for the OSGi PreferencesService and Ldap are included in the distribution. More may
~~  be added - see StorageProvider discovery.

  * the {{{bundles/command.html}pax-useradmin-command}} bundle which provides a command to transfer data between files and/or service instances.
    
~~  * a {{{ui-eclipse/index.html}pax-useradmin-ui-eclipse}} bundle (optional)

